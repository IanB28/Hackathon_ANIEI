import { useState, useEffect } from 'react';
import {
  IonPage,
  IonContent,
  IonSpinner,
  IonIcon,
} from '@ionic/react';
import { 
  libraryOutline,
  statsChartOutline,
  addCircleOutline,
  playCircleOutline,
  trashOutline,
} from 'ionicons/icons';
import { 
  crearSesionEstudio, 
  obtenerSesionesUsuario, 
  actualizarSesionEstudio, 
  eliminarSesion,
  SesionEstudio
} from '../services/sesionEstudioService';
import { observarAuth } from '../services/authService';
import TarjetaSesion from './Estudio/Componentes/TarjetaSesion';
import FormularioSesion from './Estudio/Componentes/FormularioSesion';
import Pomodoro from './Estudio/Pomodoro';
import EstadisticasComponent from './Estudio/Estadisticas';
import Detalles from './Estudio/Detalles';
import Configuracion from './Estudio/Configuracion';
import './Estudio.css';

// ============================================
// CONSTANTE - M√©todos de estudio
// ============================================
const METODOS_ESTUDIO = {
  pomodoro: {
    nombre: 'Pomodoro',
    descripcion: '25 min de enfoque + pausas. Ideal para mantener concentraci√≥n.',
    tiempoDefecto: 25,
    recomendacionesDefecto: [
      'Bebe agua',
      'Estira los brazos',
      'Respira profundo',
      'Mira a la distancia',
      'Camina un poco',
      'Toma aire fresco',
      'Relaja los ojos',
      'Come un snack saludable',
      'Estira las piernas',
      'Medita',
      'Escucha m√∫sica',
      'Toma un caf√©'
    ]
  },
  flowtime: {
    nombre: 'Flowtime',
    descripcion: 'Trabaja sin interrupciones hasta que sientas que necesitas una pausa.',
    tiempoDefecto: 50,
    recomendacionesDefecto: [
      'Camina un poco',
      'Toma aire fresco',
      'Relaja los ojos',
      'Estira las piernas',
      'Bebe agua',
      'Come algo ligero',
      'Salta un poco',
      'Mira por la ventana',
      'Respira profundo',
      'Mu√©vete',
      'Toma un descanso visual',
      'Estira el cuello'
    ]
  },
  bloque: {
    nombre: 'Bloque de Tiempo',
    descripcion: 'Divide el tiempo en bloques de estudio intenso.',
    tiempoDefecto: 45,
    recomendacionesDefecto: [
      'Respira profundo',
      'Mu√©vete un poco',
      'Toma un snack',
      'Rel√°jate',
      'Bebe agua',
      'Camina alrededor',
      'Estira los brazos',
      'Mira a la distancia',
      'Toma aire fresco',
      'Come algo',
      'Medita',
      'Descansa los ojos'
    ]
  },
};

// ============================================
// COMPONENTE PRINCIPAL - P√°gina de Estudio
// ============================================
const Estudio = () => {
  // ============================================
  // ESTADO - Control de modales
  // ============================================
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [mostrarPomodoro, setMostrarPomodoro] = useState(false);
  const [mostrarEstadisticas, setMostrarEstadisticas] = useState(false);
  const [mostrarDetalles, setMostrarDetalles] = useState(false);
  const [mostrarConfiguracion, setMostrarConfiguracion] = useState(false);

  // ============================================
  // ESTADO - Lista de sesiones
  // ============================================
  const [listaSesiones, setListaSesiones] = useState<SesionEstudio[]>([]);
  const [cargando, setCargando] = useState(true);
  const [usuarioAutenticado, setUsuarioAutenticado] = useState(false);

  // ============================================
  // ESTADO - Sesi√≥n seleccionada
  // ============================================
  const [sesionSeleccionada, setSesionSeleccionada] = useState<SesionEstudio | null>(null);
  const [sesionActiva, setSesionActiva] = useState<SesionEstudio | null>(null);
  const [sesionExpandidaId, setSesionExpandidaId] = useState<string | null>(null);

  // ============================================
  // ESTADO - Formulario
  // ============================================
  const [formulario, setFormulario] = useState({
    titulo: '',
    tema: '',
    metodoEstudio: 'pomodoro',
    tiempoTotal: '',
    tiempoPausa: '',
    pausasPomodoro: '',
    notas: '',
  });

  // ============================================
  // EFECTO: Observar autenticaci√≥n
  // ============================================
  useEffect(() => {
    const unsubscribe = observarAuth((user) => {
      if (user) {
        console.log('Usuario autenticado, cargando sesiones...');
        setUsuarioAutenticado(true);
        cargarSesiones();
      } else {
        console.log('Usuario no autenticado');
        setUsuarioAutenticado(false);
        setListaSesiones([]);
        setCargando(false);
      }
    });

    return () => unsubscribe();
  }, []);

  // ============================================
  // FUNCI√ìN - Cargar sesiones desde Firestore
  // ============================================
  const cargarSesiones = async () => {
    try {
      setCargando(true);
      const sesiones = await obtenerSesionesUsuario();
      console.log('Sesiones cargadas:', sesiones.length);
      setListaSesiones(sesiones);
    } catch (error: any) {
      console.error('Error al cargar sesiones:', error);
      
      if (error.message === 'Usuario no autenticado') {
        console.log('Esperando autenticaci√≥n...');
      } else {
        alert('Error al cargar las sesiones. Revisa la consola para m√°s detalles.');
      }
    } finally {
      setCargando(false);
    }
  };

  // ============================================
  // FUNCI√ìN - Cambiar campo del formulario
  // ============================================
  const manejarCambioFormulario = (campo: string, valor: string) => {
    setFormulario((prev) => ({
      ...prev,
      [campo]: valor,
    }));
  };

  // ============================================
  // FUNCI√ìN - Crear sesiones de demostraci√≥n
  // ============================================
  const crearSesionesDemo = async () => {
    if (!window.confirm('¬øCrear sesiones de demostraci√≥n para presentaci√≥n?\n\nSe crear√°n 10 sesiones variadas con diferentes resultados.')) {
      return;
    }

    try {
      // Sesi√≥n 1: Matem√°ticas - EXCELENTE ‚úÖ
      await crearSesionEstudio({
        titulo: 'C√°lculo Diferencial',
        tema: 'Derivadas e Integrales',
        fecha: '15 oct, 09:00',
        duracion: '50 min',
        metodoEstudio: 'Pomodoro',
        descripcionMetodo: '25 min de enfoque + pausas. Ideal para mantener concentraci√≥n.',
        tiempoTotal: 50,
        tiempoPausa: 5,
        pausasPomodoro: 2,
        recomendacionesPausa: METODOS_ESTUDIO.pomodoro.recomendacionesDefecto,
        notas: 'Repaso de teoremas fundamentales. Muy productivo.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Bien',
        colorSentimiento: '#6BCB77',
        tiempoReal: 48,
      });

      // Sesi√≥n 2: Programaci√≥n - NORMAL üòê
      await crearSesionEstudio({
        titulo: 'Estructuras de Datos',
        tema: '√Årboles Binarios',
        fecha: '14 oct, 14:30',
        duracion: '35 min',
        metodoEstudio: 'Flowtime',
        descripcionMetodo: 'Trabaja sin interrupciones hasta que sientas que necesitas una pausa.',
        tiempoTotal: 35,
        tiempoPausa: 10,
        pausasPomodoro: 1,
        recomendacionesPausa: METODOS_ESTUDIO.flowtime.recomendacionesDefecto,
        notas: 'Implementaci√≥n de AVL. Tuve algunas dudas.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Normal',
        colorSentimiento: '#FFD93D',
        tiempoReal: 37,
      });

      // Sesi√≥n 3: Historia - MAL üòû
      await crearSesionEstudio({
        titulo: 'Historia Universal',
        tema: 'Revoluci√≥n Francesa',
        fecha: '14 oct, 18:00',
        duracion: '25 min',
        metodoEstudio: 'Bloque de Tiempo',
        descripcionMetodo: 'Divide el tiempo en bloques de estudio intenso.',
        tiempoTotal: 25,
        tiempoPausa: 5,
        pausasPomodoro: 1,
        recomendacionesPausa: METODOS_ESTUDIO.bloque.recomendacionesDefecto,
        notas: 'Muchas distracciones, no pude concentrarme bien.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Mal',
        colorSentimiento: '#FF6B6B',
        tiempoReal: 20,
      });

      // Sesi√≥n 4: F√≠sica - EXCELENTE ‚úÖ
      await crearSesionEstudio({
        titulo: 'F√≠sica Cu√°ntica',
        tema: 'Principio de Incertidumbre',
        fecha: '13 oct, 10:00',
        duracion: '60 min',
        metodoEstudio: 'Pomodoro',
        descripcionMetodo: '25 min de enfoque + pausas. Ideal para mantener concentraci√≥n.',
        tiempoTotal: 60,
        tiempoPausa: 5,
        pausasPomodoro: 2,
        recomendacionesPausa: METODOS_ESTUDIO.pomodoro.recomendacionesDefecto,
        notas: 'Excelente sesi√≥n. Comprend√≠ todos los conceptos.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Bien',
        colorSentimiento: '#6BCB77',
        tiempoReal: 58,
      });

      // Sesi√≥n 5: Literatura - NORMAL üòê
      await crearSesionEstudio({
        titulo: 'Literatura Espa√±ola',
        tema: 'Don Quijote de la Mancha',
        fecha: '13 oct, 16:00',
        duracion: '40 min',
        metodoEstudio: 'Flowtime',
        descripcionMetodo: 'Trabaja sin interrupciones hasta que sientas que necesitas una pausa.',
        tiempoTotal: 40,
        tiempoPausa: 5,
        pausasPomodoro: 1,
        recomendacionesPausa: METODOS_ESTUDIO.flowtime.recomendacionesDefecto,
        notas: 'Lectura y an√°lisis. Sesi√≥n normal.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Normal',
        colorSentimiento: '#FFD93D',
        tiempoReal: 42,
      });

      // Sesi√≥n 6: Qu√≠mica - EXCELENTE ‚úÖ
      await crearSesionEstudio({
        titulo: 'Qu√≠mica Org√°nica',
        tema: 'Reacciones de S√≠ntesis',
        fecha: '12 oct, 11:30',
        duracion: '55 min',
        metodoEstudio: 'Bloque de Tiempo',
        descripcionMetodo: 'Divide el tiempo en bloques de estudio intenso.',
        tiempoTotal: 55,
        tiempoPausa: 10,
        pausasPomodoro: 2,
        recomendacionesPausa: METODOS_ESTUDIO.bloque.recomendacionesDefecto,
        notas: 'Pr√°ctica de ejercicios. Todo sali√≥ muy bien.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Bien',
        colorSentimiento: '#6BCB77',
        tiempoReal: 53,
      });

      // Sesi√≥n 7: Ingl√©s - MAL üòû
      await crearSesionEstudio({
        titulo: 'English Grammar',
        tema: 'Past Perfect Continuous',
        fecha: '12 oct, 19:00',
        duracion: '30 min',
        metodoEstudio: 'Pomodoro',
        descripcionMetodo: '25 min de enfoque + pausas. Ideal para mantener concentraci√≥n.',
        tiempoTotal: 30,
        tiempoPausa: 5,
        pausasPomodoro: 1,
        recomendacionesPausa: METODOS_ESTUDIO.pomodoro.recomendacionesDefecto,
        notas: 'Cansancio mental. No pude enfocarme bien.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Mal',
        colorSentimiento: '#FF6B6B',
        tiempoReal: 25,
      });

      // Sesi√≥n 8: Bases de Datos - NORMAL üòê
      await crearSesionEstudio({
        titulo: 'Bases de Datos',
        tema: 'Normalizaci√≥n y Formas Normales',
        fecha: '11 oct, 15:00',
        duracion: '45 min',
        metodoEstudio: 'Flowtime',
        descripcionMetodo: 'Trabaja sin interrupciones hasta que sientas que necesitas una pausa.',
        tiempoTotal: 45,
        tiempoPausa: 5,
        pausasPomodoro: 1,
        recomendacionesPausa: METODOS_ESTUDIO.flowtime.recomendacionesDefecto,
        notas: 'Repaso de conceptos. Sesi√≥n regular.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Normal',
        colorSentimiento: '#FFD93D',
        tiempoReal: 46,
      });

      // Sesi√≥n 9: Estad√≠stica - EXCELENTE ‚úÖ
      await crearSesionEstudio({
        titulo: 'Probabilidad',
        tema: 'Distribuciones de Probabilidad',
        fecha: '11 oct, 09:30',
        duracion: '70 min',
        metodoEstudio: 'Bloque de Tiempo',
        descripcionMetodo: 'Divide el tiempo en bloques de estudio intenso.',
        tiempoTotal: 70,
        tiempoPausa: 10,
        pausasPomodoro: 3,
        recomendacionesPausa: METODOS_ESTUDIO.bloque.recomendacionesDefecto,
        notas: 'Ejercicios resueltos y teor√≠a. Excelente progreso.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Bien',
        colorSentimiento: '#6BCB77',
        tiempoReal: 68,
      });

      // Sesi√≥n 10: Redes - MAL üòû
      await crearSesionEstudio({
        titulo: 'Redes de Computadoras',
        tema: 'Protocolo TCP/IP',
        fecha: '10 oct, 20:00',
        duracion: '35 min',
        metodoEstudio: 'Pomodoro',
        descripcionMetodo: '25 min de enfoque + pausas. Ideal para mantener concentraci√≥n.',
        tiempoTotal: 35,
        tiempoPausa: 5,
        pausasPomodoro: 1,
        recomendacionesPausa: METODOS_ESTUDIO.pomodoro.recomendacionesDefecto,
        notas: 'Tarde en la noche. No fue buena idea estudiar tan tarde.',
        estado: 'terminada' as const,
        sentimientoFinal: 'Mal',
        colorSentimiento: '#FF6B6B',
        tiempoReal: 30,
      });

      await cargarSesiones();
      alert('‚úÖ ¬°10 sesiones de demostraci√≥n creadas!\n\nüìä 5 Bien | 3 Normal | 3 Mal');
    } catch (error) {
      console.error('Error al crear sesiones demo:', error);
      alert('‚ùå Error al crear las sesiones');
    }
  };

  // ============================================
  // FUNCI√ìN - Guardar nueva sesi√≥n
  // ============================================
  const manejarGuardarSesion = async () => {
    if (!formulario.titulo || !formulario.tema) {
      alert('Por favor completa al menos el t√≠tulo y tema');
      return;
    }

    const tiempoTotalNum = parseInt(formulario.tiempoTotal);
    const tiempoPausaNum = parseInt(formulario.tiempoPausa);
    const pausasNum = parseInt(formulario.pausasPomodoro);

    if (!tiempoTotalNum || tiempoTotalNum < 15) {
      alert('El tiempo total debe ser mayor a 15 minutos');
      return;
    }

    // Para Flowtime, permitir pausas y duraci√≥n en 0
    const esFlowtime = formulario.metodoEstudio === 'flowtime';
    
    if (!esFlowtime && (!tiempoPausaNum || tiempoPausaNum < 1)) {
      alert('El tiempo de pausa debe ser al menos 1 minuto');
      return;
    }

    if (!esFlowtime && (!pausasNum || pausasNum < 1)) {
      alert('Debe haber al menos 1 pausa');
      return;
    }

    // Para Flowtime, si no se especifican pausas, usar 0
    const pausasFinales = esFlowtime && !pausasNum ? 0 : pausasNum;
    const tiempoPausaFinal = esFlowtime && !tiempoPausaNum ? 0 : tiempoPausaNum;

    const metodo =
      METODOS_ESTUDIO[formulario.metodoEstudio as keyof typeof METODOS_ESTUDIO];

    try {
      const nuevaSesion = {
        titulo: formulario.titulo,
        tema: formulario.tema,
        fecha: new Date().toLocaleDateString('es-MX', {
          day: 'numeric',
          month: 'short',
          hour: '2-digit',
          minute: '2-digit',
        }),
        duracion: `${tiempoTotalNum} min`,
        metodoEstudio: metodo.nombre,
        descripcionMetodo: metodo.descripcion,
        tiempoTotal: tiempoTotalNum,
        tiempoPausa: tiempoPausaFinal,
        pausasPomodoro: pausasFinales,
        recomendacionesPausa: metodo.recomendacionesDefecto,
        notas: formulario.notas,
        estado: 'planificada' as const,
      };

      const sesionCreada = await crearSesionEstudio(nuevaSesion);
      await cargarSesiones();
      setMostrarFormulario(false);

      setFormulario({
        titulo: '',
        tema: '',
        metodoEstudio: 'pomodoro',
        tiempoTotal: '',
        tiempoPausa: '',
        pausasPomodoro: '',
        notas: '',
      });

      // Preguntar si quiere iniciar la sesi√≥n inmediatamente
      const iniciarAhora = window.confirm('‚úÖ Sesi√≥n creada exitosamente\n\n¬øDeseas iniciar la sesi√≥n de estudio ahora?');
      
      if (iniciarAhora) {
        // Buscar la sesi√≥n reci√©n creada
        const sesionesActualizadas = await obtenerSesionesUsuario();
        const sesionNueva = sesionesActualizadas.find(s => s.id === sesionCreada);
        
        if (sesionNueva) {
          setSesionActiva(sesionNueva);
          setMostrarPomodoro(true);
        }
      }
    } catch (error) {
      console.error('Error al crear sesi√≥n:', error);
      alert('‚ùå Error al crear la sesi√≥n');
    }
  };

  // ============================================
  // FUNCI√ìN - Eliminar sesi√≥n
  // ============================================
  const manejarEliminarSesion = async (id: string) => {
    if (!window.confirm('¬øEst√°s seguro de eliminar esta sesi√≥n?')) {
      return;
    }

    try {
      await eliminarSesion(id);
      await cargarSesiones();
      alert('‚úÖ Sesi√≥n eliminada');
    } catch (error) {
      console.error('Error al eliminar sesi√≥n:', error);
      alert('‚ùå Error al eliminar la sesi√≥n');
    }
  };

  // ============================================
  // FUNCI√ìN - Ver detalles de sesi√≥n
  // ============================================
  const manejarVerDetalles = (sesion: SesionEstudio) => {
    setSesionSeleccionada(sesion);
    setMostrarDetalles(true);
  };

  // ============================================
  // FUNCI√ìN - Iniciar sesi√≥n
  // ============================================
  const manejarIniciarSesion = (sesion: SesionEstudio) => {
    setSesionActiva(sesion);
    setMostrarPomodoro(true);
  };

  // ============================================
  // FUNCI√ìN - Terminar sesi√≥n
  // ============================================
  const manejarTerminarSesion = async (sesionTerminada: SesionEstudio) => {
    if (!sesionTerminada.id) return;

    try {
      await actualizarSesionEstudio(sesionTerminada.id, {
        sentimientoFinal: sesionTerminada.sentimientoFinal,
        colorSentimiento: sesionTerminada.colorSentimiento,
        estado: sesionTerminada.estado,
        tiempoReal: sesionTerminada.tiempoReal,
      });

      await cargarSesiones();
    } catch (error) {
      console.error('Error al guardar sesi√≥n:', error);
      alert('‚ùå Error al guardar la sesi√≥n');
    }
  };

  // ============================================
  // VERIFICAR AUTENTICACI√ìN
  // ============================================
  if (!usuarioAutenticado && !cargando) {
    return (
      <IonPage className="estudio-page">
        <IonContent className="estudio-content ion-padding ion-text-center">
          <div style={{ marginTop: '50px', color: 'white' }}>
            <h2>‚ö†Ô∏è No est√°s autenticado</h2>
            <p>Por favor inicia sesi√≥n para ver tus sesiones de estudio.</p>
          </div>
        </IonContent>
      </IonPage>
    );
  }

  // ============================================
  // RETORNO - P√°gina principal
  // ============================================
  return (
    <IonPage className="estudio-page">
      <IonContent className="estudio-content" fullscreen>
        {/* ========== HEADER MEJORADO ========== */}
        <div className="header-section">
          <div className="header-left">
            <div className="app-logo">
              <IonIcon icon={libraryOutline} className="logo-icon" />
            </div>
            <div className="header-info">
              <h1 className="header-title">Sesiones de estudio</h1>
            </div>
          </div>
          <div className="header-actions">
            <button className="btn-icon-modern" onClick={() => setMostrarEstadisticas(true)} title="Ver estad√≠sticas">
              <IonIcon icon={statsChartOutline} />
            </button>
            <button className="btn-icon-modern btn-primary" onClick={() => setMostrarFormulario(true)} title="Nueva sesi√≥n">
              <IonIcon icon={addCircleOutline} />
            </button>
          </div>
        </div>

        {/* ========== SESIONES ========== */}
        <div className="sessions-container">
          {cargando ? (
            <div style={{ textAlign: 'center', padding: '20px' }}>
              <IonSpinner name="crescent" color="light" />
              <p style={{ color: 'white', marginTop: '12px' }}>Cargando...</p>
            </div>
          ) : listaSesiones.length > 0 ? (
            listaSesiones.map((sesion) => (
              <TarjetaSesion
                key={sesion.id}
                sesion={sesion}
                onVerDetalles={manejarVerDetalles}
                onEliminar={manejarEliminarSesion}
                onIniciar={manejarIniciarSesion}
                onActualizar={cargarSesiones}
                expandido={sesionExpandidaId === sesion.id}
                onToggleExpand={(id: string) => {
                  setSesionExpandidaId(sesionExpandidaId === id ? null : id);
                }}
              />
            ))
          ) : (
            <div style={{ textAlign: 'center', padding: '20px' }}>
              <p style={{ color: 'white', marginBottom: '16px' }}>A√∫n no tienes sesiones</p>
              <button 
                className="btn-icon" 
                onClick={crearSesionesDemo}
                style={{ width: '48px', height: '48px', fontSize: '24px' }}
              >
                üé®
              </button>
              <p style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px', marginTop: '8px' }}>
                Crear sesiones de prueba
              </p>
            </div>
          )}
        </div>
      </IonContent>

      {/* ========== MODALES ========== */}
      <FormularioSesion
        isOpen={mostrarFormulario}
        onDismiss={() => setMostrarFormulario(false)}
        onGuardar={manejarGuardarSesion}
        formulario={formulario}
        onFormularioChange={manejarCambioFormulario}
      />

      <Pomodoro
        isOpen={mostrarPomodoro}
        sesionActiva={sesionActiva}
        onDismiss={() => setMostrarPomodoro(false)}
        onTerminarSesion={manejarTerminarSesion}
      />

      <EstadisticasComponent
        isOpen={mostrarEstadisticas}
        onDismiss={() => setMostrarEstadisticas(false)}
        sesiones={listaSesiones}
      />

      <Detalles
        isOpen={mostrarDetalles}
        onDismiss={() => setMostrarDetalles(false)}
        sesion={sesionSeleccionada}
      />

      <Configuracion
        isOpen={mostrarConfiguracion}
        onDismiss={() => setMostrarConfiguracion(false)}
      />
    </IonPage>
  );
};

export default Estudio;